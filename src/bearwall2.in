#!/bin/bash

set -e -o pipefail

BASEDIR=@BASEDIR@
CONFDIR=@CONFDIR@
DATADIR=@DATADIR@

# Don't change these directly, they are filled in by make release
# when a new release is built.
VERSION="2.00"
REVISION="HEAD"

# Parse configuration file
# Configuration variables can be accessed as conf_KEY
if [ ! -f "${CONFDIR}/bearwall2.conf" ]; then
	echo "No configuration file found at ${CONFDIR}/bearwall2.conf, aborting."
	exit -1
fi
while read -r line; do
	if [[ "$line" =~ ^[^#]*= ]]; then
		k=$(echo "${line}" | cut -d'=' -f 1)
		v=$(echo "${line}" | cut -d'=' -f 2-)
		export $"conf_${k}"="${v}"
	fi
done < "${CONFDIR}/bearwall2.conf"

# Command line arguments
MODE=""

while [ ! $# -eq 0 ]; do
	case "$1" in
		-t | --try | try)
			if [ "${2}" ]; then
				ROLLBACK_DELAY=${2}
				shift
			else
				ROLLBACK_DELAY=${conf_rollback_delay}
			fi
			MODE="try"
			;;
		-r | --rollback | rollback)
			if [ "${2}" ]; then
				ROLLBACK_DELAY=${2}
				shift
			else
				ROLLBACK_DELAY=0
			fi
			MODE="rollback"
			;;
		-c | --commit | commit)
			MODE="commit"
			;;
		-f | --flush | flush)
			MODE="flush"
			;;
		-d | --dry-run | dry-run)
			MODE="dryrun"
			;;
		-v | --version | version)
			echo "$(basename "${0}") version ${VERSION}"
			exit
			;;
		-h | --help | help)
			echo "Usage: $(basename "${0}") [help | version | flush | dry-run | try | commit | rollback]"
			echo ""
			echo "Options:"
			echo "	* -t|--try [time]	Temporarily apply firewall rules, if not committed, automatically rollback"
			echo "	* -c|--commit		Apply firewall rules from try command permanently"
			echo "	* -r|--rollback		Rollback firewall rules applied by try command immediately"
			echo "	* -h|--help		Display help"
			echo "	* -v|--version		Show version"
			echo "	* -d|--dry-run		Generate firewall rules, but don't install them"
			echo "	* -f|--flush		Remove current firewall rules"
			echo ""
			echo "	* If run with no arguments bearwall will start as normal and install firewall rules"
			exit
			;;
		*)
			echo "$(basename "${0}") does not understand ${1}"
			exit
			;;
	esac
	shift
done

cd $BASEDIR
. support/common.functions
. support/firewall.functions

BACKUP="${DATADIR}/tmp/backup.nftables"
OF="${DATADIR}/tmp/output.nftables"

if [ "${MODE}" == "rollback" ]; then
	status "Rolling back firewall to previous state"
	if [ ! -f "${BACKUP}" ]; then
		substatus "Rollback failed, no previous backup state found"
		exit -1
	fi

	sleep "${ROLLBACK_DELAY}"
	substatus "Invoking nftables (nft)"
	/usr/sbin/nft -f "${BACKUP}"

	# Tidy other rollbacks which might be running in background
	stop_rollbacks
	exit 0
fi

# flush the datadir
rm -rf "${DATADIR}/tmp"
mkdir -p "${DATADIR}/tmp"

if [ "${MODE}" == "commit" ]; then
	status "Committing current firewall policy"
	if stop_rollbacks; then
		substatus "Commit successful"
		exit 0
	else
		substatus "Commit failed, no rollback queued"
		exit -1
	fi
fi

if pgrep -f 'bearwall2 rollback' > /dev/null; then
	echo "Error: last change not committed, either commit or rollback"
	exit -1
fi

# Check we actually have interface configuration before we start
if [ -d $CONFDIR/interfaces.d/ ]; then
	INTFILES=$(
		(ls -1 ${CONFDIR}/interfaces.d/*.if 2>/dev/null || true) | wc -l
	)
	if [ "${INTFILES}" -eq 0 ] ; then
		echo "No interfaces defined in $CONFDIR/interfaces.d, aborting."
		exit 0
	fi
else
	echo "No interfaces.d directory in $CONFDIR/, aborting."
	exit 0
fi

# User is requesting we kill the firewall, not load it.
if [ "${MODE}" == "flush" ]; then
	status "Flushing firewall"

	substatus "Invoking nftables (nft flush ruleset)"
	/usr/sbin/nft flush ruleset
	exit 0
fi

HOOK_PREROUTING=0
HOOK_POSTROUTING=0
HOOK_INPUT=0
HOOK_OUTPUT=0
HOOK_FORWARD=0
HOOK_FORWARD_IN=0
HOOK_FORWARD_OUT=0
VMAP_IIF=0
VMAP_IFNAME=0
declare -a INPUT_IFACE
declare -a INTERFACES

KERNEL_INTERFACES=$(ip -o link | sed 's/^[0-9]\+: \([a-zA-Z0-9_\.-]*\).*$/\1/')
KERNEL_INTERFACES="localhost $KERNEL_INTERFACES"

# This is the meat of the script.
# For each interface (defined in the $CONFDIR/interfaces.d directory)
#  Create some chains, "if-in", "if-out", "if-forward-in", "if-forward-out"
#  "if-postrouting-out"
#  Then source the file in that directory.
# most of your rules will be defined in these files
echo "flush ruleset" > "${OF}"
echo "table inet bearwall {" >> "${OF}"

# Deal with any conf_conntrack options
. support/notrack

status Configuring interfaces
for intf in $CONFDIR/interfaces.d/*.if; do
	if=$(basename "${intf}" | sed s/\.if$//)

	load_interface_rules "${if}"
done

build_vmap ${HOOK_INPUT} input input "${INPUT_IFACE[@]}"
build_vmap ${HOOK_OUTPUT} output output "${OUTPUT_IFACE[@]}"
build_vmap_fwd
build_vmap ${HOOK_PREROUTING} prerouting prerouting "${PREROUTING_IFACE[@]}"
build_vmap ${HOOK_POSTROUTING} postrouting postrouting "${POSTROUTING_IFACE[@]}"
echo "}" >> "${OF}"

if [ "${MODE}" == "try" ]; then
	status "Applying firewall policies with automatic rollback"
	substatus "Backing up previous nftables state"
	echo "flush ruleset" > "${BACKUP}"
	/usr/sbin/nft list ruleset >> "${BACKUP}"
	nohup bash -c "/usr/sbin/bearwall2 rollback ${ROLLBACK_DELAY}" </dev/null >/dev/null 2>&1 &
	substatus "Invoking nftables (nft)"

	echo "\

The new firewall policy has been temporarily applied and will
be automatically rolled back in ${ROLLBACK_DELAY} seconds unless committed.

To commit the new firewall policy, run:
	$ sudo bearwall2 commit

To rollback without waiting, run:
	$ sudo bearwall2 rollback"

	if ! /usr/sbin/nft -f "${OF}"; then
		substatus "Error loading nftables rules, abandoning new changes"
		stop_rollbacks
	fi
elif [ "${MODE}" == "dryrun" ]; then
	status "Dry-run mode, not loading firewall policies"
	substatus "nftables rule file can be found at ${OF}"
else
	status "Doing atomic load"
	substatus "Invoking nftables (nft)"
	/usr/sbin/nft -f "${OF}"
fi
